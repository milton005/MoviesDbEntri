// Generated by Dagger (https://dagger.dev).
package com.example.moviedb_entri.di.Modules;

import com.example.moviedb_entri.data.remote.ApiService;
import com.example.moviedb_entri.data.remote.NetworkDataSource;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideNetworkDataSourceFactory implements Factory<NetworkDataSource> {
  private final NetworkModule module;

  private final Provider<ApiService> apiServiceProvider;

  public NetworkModule_ProvideNetworkDataSourceFactory(NetworkModule module,
      Provider<ApiService> apiServiceProvider) {
    this.module = module;
    this.apiServiceProvider = apiServiceProvider;
  }

  @Override
  public NetworkDataSource get() {
    return provideNetworkDataSource(module, apiServiceProvider.get());
  }

  public static NetworkModule_ProvideNetworkDataSourceFactory create(NetworkModule module,
      Provider<ApiService> apiServiceProvider) {
    return new NetworkModule_ProvideNetworkDataSourceFactory(module, apiServiceProvider);
  }

  public static NetworkDataSource provideNetworkDataSource(NetworkModule instance,
      ApiService apiService) {
    return Preconditions.checkNotNull(instance.provideNetworkDataSource(apiService), "Cannot return null from a non-@Nullable @Provides method");
  }
}
