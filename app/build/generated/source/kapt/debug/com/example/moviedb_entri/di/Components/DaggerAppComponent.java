// Generated by Dagger (https://dagger.dev).
package com.example.moviedb_entri.di.Components;

import android.content.Context;
import androidx.lifecycle.ViewModelProvider;
import com.example.moviedb_entri.data.DispatcherProvider;
import com.example.moviedb_entri.data.local.DbRepoMapper_Factory;
import com.example.moviedb_entri.data.local.MovieDao;
import com.example.moviedb_entri.data.local.MovieDatabase;
import com.example.moviedb_entri.data.remote.ApiService;
import com.example.moviedb_entri.data.remote.NetworkDataSource;
import com.example.moviedb_entri.data.repository.AppRepository;
import com.example.moviedb_entri.di.Modules.ContextModule;
import com.example.moviedb_entri.di.Modules.ContextModule_AppContextFactory;
import com.example.moviedb_entri.di.Modules.DaoModule;
import com.example.moviedb_entri.di.Modules.DaoModule_ProvideGitHubRepoEntityDaoFactory;
import com.example.moviedb_entri.di.Modules.DatabaseModule;
import com.example.moviedb_entri.di.Modules.DatabaseModule_ProvideDatabaseFactory;
import com.example.moviedb_entri.di.Modules.DispatcherProviderModule;
import com.example.moviedb_entri.di.Modules.DispatcherProviderModule_ProvideCoroutinesDispatcherProviderFactory;
import com.example.moviedb_entri.di.Modules.HomeModule;
import com.example.moviedb_entri.di.Modules.HomeModule_ProvideHomeAdapterFactory;
import com.example.moviedb_entri.di.Modules.HomeModule_ProvideHomeViewModelFactory;
import com.example.moviedb_entri.di.Modules.HomeModule_ProvideViewModelFactoryFactory;
import com.example.moviedb_entri.di.Modules.NetworkModule;
import com.example.moviedb_entri.di.Modules.NetworkModule_GetHttpLoggingInterceptorFactory;
import com.example.moviedb_entri.di.Modules.NetworkModule_ProvideApiServiceFactory;
import com.example.moviedb_entri.di.Modules.NetworkModule_ProvideCallAdapterFactoryFactory;
import com.example.moviedb_entri.di.Modules.NetworkModule_ProvideGsonConverterFactoryFactory;
import com.example.moviedb_entri.di.Modules.NetworkModule_ProvideGsonFactory;
import com.example.moviedb_entri.di.Modules.NetworkModule_ProvideNetworkDataSourceFactory;
import com.example.moviedb_entri.di.Modules.NetworkModule_ProvideOkHttp3DownloaderFactory;
import com.example.moviedb_entri.di.Modules.NetworkModule_ProvideOkHttpClientFactory;
import com.example.moviedb_entri.di.Modules.NetworkModule_ProvidePicassoFactory;
import com.example.moviedb_entri.di.Modules.NetworkModule_ProvideRetrofitFactory;
import com.example.moviedb_entri.di.Modules.RepositoryModule;
import com.example.moviedb_entri.di.Modules.RepositoryModule_ProvideAppRepositoryFactory;
import com.example.moviedb_entri.ui.Adapter.HomeAdapter;
import com.example.moviedb_entri.ui.HomeViewModel;
import com.google.gson.Gson;
import com.jakewharton.retrofit2.adapter.kotlin.coroutines.CoroutineCallAdapterFactory;
import com.squareup.picasso.OkHttp3Downloader;
import com.squareup.picasso.Picasso;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final ContextModule contextModule;

  private final DaoModule daoModule;

  private final HomeModule homeModule;

  private Provider<Context> appContextProvider;

  private Provider<MovieDatabase> provideDatabaseProvider;

  private Provider<HttpLoggingInterceptor> getHttpLoggingInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<CoroutineCallAdapterFactory> provideCallAdapterFactoryProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<GsonConverterFactory> provideGsonConverterFactoryProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ApiService> provideApiServiceProvider;

  private Provider<NetworkDataSource> provideNetworkDataSourceProvider;

  private Provider<OkHttp3Downloader> provideOkHttp3DownloaderProvider;

  private Provider<Picasso> providePicassoProvider;

  private Provider<MovieDao> provideGitHubRepoEntityDaoProvider;

  private Provider<DispatcherProvider> provideCoroutinesDispatcherProvider;

  private Provider<AppRepository> provideAppRepositoryProvider;

  private DaggerAppComponent(HomeModule homeModuleParam, ContextModule contextModuleParam,
      NetworkModule networkModuleParam, DispatcherProviderModule dispatcherProviderModuleParam,
      DatabaseModule databaseModuleParam, DaoModule daoModuleParam,
      RepositoryModule repositoryModuleParam) {
    this.contextModule = contextModuleParam;
    this.daoModule = daoModuleParam;
    this.homeModule = homeModuleParam;
    initialize(homeModuleParam, contextModuleParam, networkModuleParam, dispatcherProviderModuleParam, databaseModuleParam, daoModuleParam, repositoryModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final HomeModule homeModuleParam, final ContextModule contextModuleParam,
      final NetworkModule networkModuleParam,
      final DispatcherProviderModule dispatcherProviderModuleParam,
      final DatabaseModule databaseModuleParam, final DaoModule daoModuleParam,
      final RepositoryModule repositoryModuleParam) {
    this.appContextProvider = ContextModule_AppContextFactory.create(contextModuleParam);
    this.provideDatabaseProvider = DoubleCheck.provider(DatabaseModule_ProvideDatabaseFactory.create(databaseModuleParam, appContextProvider));
    this.getHttpLoggingInterceptorProvider = DoubleCheck.provider(NetworkModule_GetHttpLoggingInterceptorFactory.create(networkModuleParam));
    this.provideOkHttpClientProvider = DoubleCheck.provider(NetworkModule_ProvideOkHttpClientFactory.create(networkModuleParam, appContextProvider, getHttpLoggingInterceptorProvider));
    this.provideCallAdapterFactoryProvider = NetworkModule_ProvideCallAdapterFactoryFactory.create(networkModuleParam);
    this.provideGsonProvider = NetworkModule_ProvideGsonFactory.create(networkModuleParam);
    this.provideGsonConverterFactoryProvider = NetworkModule_ProvideGsonConverterFactoryFactory.create(networkModuleParam, provideGsonProvider);
    this.provideRetrofitProvider = DoubleCheck.provider(NetworkModule_ProvideRetrofitFactory.create(networkModuleParam, provideOkHttpClientProvider, provideCallAdapterFactoryProvider, provideGsonConverterFactoryProvider));
    this.provideApiServiceProvider = DoubleCheck.provider(NetworkModule_ProvideApiServiceFactory.create(networkModuleParam, provideRetrofitProvider));
    this.provideNetworkDataSourceProvider = DoubleCheck.provider(NetworkModule_ProvideNetworkDataSourceFactory.create(networkModuleParam, provideApiServiceProvider));
    this.provideOkHttp3DownloaderProvider = DoubleCheck.provider(NetworkModule_ProvideOkHttp3DownloaderFactory.create(networkModuleParam, provideOkHttpClientProvider));
    this.providePicassoProvider = DoubleCheck.provider(NetworkModule_ProvidePicassoFactory.create(networkModuleParam, appContextProvider, provideOkHttp3DownloaderProvider));
    this.provideGitHubRepoEntityDaoProvider = DaoModule_ProvideGitHubRepoEntityDaoFactory.create(daoModuleParam, provideDatabaseProvider);
    this.provideCoroutinesDispatcherProvider = DispatcherProviderModule_ProvideCoroutinesDispatcherProviderFactory.create(dispatcherProviderModuleParam);
    this.provideAppRepositoryProvider = DoubleCheck.provider(RepositoryModule_ProvideAppRepositoryFactory.create(repositoryModuleParam, DbRepoMapper_Factory.create(), provideGitHubRepoEntityDaoProvider, provideNetworkDataSourceProvider, provideCoroutinesDispatcherProvider));
  }

  @Override
  public Context appContext() {
    return ContextModule_AppContextFactory.appContext(contextModule);}

  @Override
  public MovieDatabase database() {
    return provideDatabaseProvider.get();}

  @Override
  public MovieDao movieEntityDao() {
    return DaoModule_ProvideGitHubRepoEntityDaoFactory.provideGitHubRepoEntityDao(daoModule, provideDatabaseProvider.get());}

  @Override
  public Retrofit retrofit() {
    return provideRetrofitProvider.get();}

  @Override
  public ApiService apiService() {
    return provideApiServiceProvider.get();}

  @Override
  public NetworkDataSource NetworkDataSource() {
    return provideNetworkDataSourceProvider.get();}

  @Override
  public Picasso picasso() {
    return providePicassoProvider.get();}

  @Override
  public AppRepository appRepository() {
    return provideAppRepositoryProvider.get();}

  @Override
  public HomeAdapter homeAdapter() {
    return HomeModule_ProvideHomeAdapterFactory.provideHomeAdapter(homeModule, providePicassoProvider.get());}

  @Override
  public HomeViewModel homeViewModel() {
    return HomeModule_ProvideHomeViewModelFactory.provideHomeViewModel(homeModule, provideAppRepositoryProvider.get());}

  @Override
  public ViewModelProvider.Factory viewModelFactory() {
    return HomeModule_ProvideViewModelFactoryFactory.provideViewModelFactory(homeModule, homeViewModel());}

  public static final class Builder {
    private HomeModule homeModule;

    private ContextModule contextModule;

    private NetworkModule networkModule;

    private DispatcherProviderModule dispatcherProviderModule;

    private DatabaseModule databaseModule;

    private DaoModule daoModule;

    private RepositoryModule repositoryModule;

    private Builder() {
    }

    public Builder homeModule(HomeModule homeModule) {
      this.homeModule = Preconditions.checkNotNull(homeModule);
      return this;
    }

    public Builder contextModule(ContextModule contextModule) {
      this.contextModule = Preconditions.checkNotNull(contextModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public Builder dispatcherProviderModule(DispatcherProviderModule dispatcherProviderModule) {
      this.dispatcherProviderModule = Preconditions.checkNotNull(dispatcherProviderModule);
      return this;
    }

    public Builder databaseModule(DatabaseModule databaseModule) {
      this.databaseModule = Preconditions.checkNotNull(databaseModule);
      return this;
    }

    public Builder daoModule(DaoModule daoModule) {
      this.daoModule = Preconditions.checkNotNull(daoModule);
      return this;
    }

    public Builder repositoryModule(RepositoryModule repositoryModule) {
      this.repositoryModule = Preconditions.checkNotNull(repositoryModule);
      return this;
    }

    public AppComponent build() {
      if (homeModule == null) {
        this.homeModule = new HomeModule();
      }
      Preconditions.checkBuilderRequirement(contextModule, ContextModule.class);
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (dispatcherProviderModule == null) {
        this.dispatcherProviderModule = new DispatcherProviderModule();
      }
      if (databaseModule == null) {
        this.databaseModule = new DatabaseModule();
      }
      if (daoModule == null) {
        this.daoModule = new DaoModule();
      }
      if (repositoryModule == null) {
        this.repositoryModule = new RepositoryModule();
      }
      return new DaggerAppComponent(homeModule, contextModule, networkModule, dispatcherProviderModule, databaseModule, daoModule, repositoryModule);
    }
  }
}
